name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches-ignore:
      # Run on all pull requests except for release PRs which don't change code
      - 'release-please**'
  workflow_dispatch:

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - uses: ipfs/aegir/actions/cache-node-modules@master
    - name: Save ./dist output for later
      uses: actions/upload-artifact@v4
      with:
        name: dist_${{ github.sha }}
        path: dist

  check:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
    - uses: ipfs/aegir/actions/cache-node-modules@master
    - run: npm run --if-present lint
    - run: npm run --if-present dep-check
    - run: npm run --if-present doc-check

  test-node:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        node: [lts/*]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run --if-present test:node
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: node
          files: .coverage/*,packages/*/.coverage/*

  test-chrome:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npx playwright install --with-deps
      - run: npm run --if-present test:chrome
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: chrome
          files: .coverage/*,packages/*/.coverage/*

  test-chrome-webworker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run --if-present test:chrome-webworker
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: chrome-webworker
          files: .coverage/*,packages/*/.coverage/*

  test-firefox:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npx playwright install --with-deps
      - run: npm run --if-present test:firefox
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: firefox
          files: .coverage/*,packages/*/.coverage/*

  test-firefox-webworker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run --if-present test:firefox-webworker
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: firefox-webworker
          files: .coverage/*,packages/*/.coverage/*

  test-webkit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npm run --if-present test:webkit
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: webkit
          files: .coverage/*,packages/*/.coverage/*

  test-electron-main:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npx xvfb-maybe npm run --if-present test:electron-main
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: electron-main
          files: .coverage/*,packages/*/.coverage/*

  test-electron-renderer:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - uses: ipfs/aegir/actions/cache-node-modules@master
      - run: npx xvfb-maybe npm run --if-present test:electron-renderer
      - uses: codecov/codecov-action@5ecb98a3c6b747ed38dc09f787459979aebb39be # v4.3.1
        with:
          flags: electron-renderer
          files: .coverage/*,packages/*/.coverage/*

  release-please:
    runs-on: ubuntu-latest
    if: (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/main'
    needs: [ build, check ]
    permissions:
      contents: write # to create release
      pull-requests: write # to create release PR
    steps:
      - uses: googleapis/release-please-action@7987652d64b4581673a76e33ad5e98e3dd56832f # v4.1.3
        with:
          release-type: node

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [ build, check, release-please ]
    if: ((github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/main' && needs.release-please.outputs.releases_created == 'true')
    permissions:
      pull-requests: write # to create release PR
    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging
      - name: Fetch all tags
        run: git fetch --tags
      - name: Get latest tag
        id: get_latest_tag
        run: echo "tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
      - name: Checkout latest tag
        run: git checkout ${{ steps.get_latest_tag.outputs.tag }}
      - name: Ensure staging-release branch points to latest tag
        run: |
          git checkout -B staging-release ${{ steps.get_latest_tag.outputs.tag }}
          git push origin staging-release --force
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # v7.0.5
        with:
          base: staging
          branch: staging-release
          title: 'chore: point staging to release ${{ steps.get_latest_tag.outputs.tag }}'
          body: 'This PR points the staging branch to release ${{ steps.get_latest_tag.outputs.tag }}.'

  # from https://github.com/peter-evans/create-pull-request/blob/main/docs/examples.md#keep-a-branch-up-to-date-with-another
  deploy-production:
    runs-on: ubuntu-latest
    needs: [ build, check, release-please ]
    if: ((github.event_name == 'workflow_dispatch' || github.event_name == 'push') && github.ref == 'refs/heads/main' && needs.release-please.outputs.releases_created == 'true')
    permissions:
      pull-requests: write # to create release PR
    steps:
      - uses: actions/checkout@v4
        with:
          ref: production
      - name: Fetch all tags
        run: git fetch --tags
      - name: Get latest tag
        id: get_latest_tag
        run: echo "tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
      - name: Checkout latest tag
        run: git checkout ${{ steps.get_latest_tag.outputs.tag }}
      - name: Ensure production-release branch points to latest tag
        run: |
          git checkout -B production-release ${{ steps.get_latest_tag.outputs.tag }}
          git push origin production-release --force
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # v7.0.5
        with:
          base: production
          branch: production-release
          title: 'chore: Point production to release ${{ steps.get_latest_tag.outputs.tag }}'
          body: 'This PR points the production branch to release ${{ steps.get_latest_tag.outputs.tag }}.'
